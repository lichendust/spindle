/*
	Spindle
	A static site generator
	Copyright (C) 2022-2023 Harley Denham

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// this file was generated by tool/embed.sh: don't modify!

package main

func manual_content(arg string) string {
	switch arg {
	default:
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Spindle v0.4.2 Manual</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/></head><body><main><tt><a href="/_spindle/manual">Manual</a></tt><h1>Spindle v0.4.2 Manual</h1><p>Welcome to the internal Spindle documentation. Spindle is a static site generator designed with total flexibility in mind. It is also not complete.</p><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></main></body></html>`
	case "scripting":
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Scripting</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/></head><body><main><tt><a href="/_spindle/manual">Spindle v0.4.2 Manual</a></tt><h1>Scripting</h1><ul class="monospace"><li><a class="nu" href="#implicit-values-and-types">Implicit Values and Types</a></li><li style="margin-left:2rem"><a class="nu" href="#data"><code>data</code></a></li><li style="margin-left:2rem"><a class="nu" href="#scripttoken"><code>script_token</code></a></li><li style="margin-left:2rem"><a class="nu" href="#modifier"><code>modifier</code></a></li><li><a class="nu" href="#functions">Functions</a></li><li style="margin-left:2rem"><a class="nu" href="#textmodifier"><code>text_modifier</code></a></li><li style="margin-left:2rem"><a class="nu" href="#page-contents">Page Contents</a></li></ul><h2 id="implicit-values-and-types">Implicit Values and Types</h2><h3 id="data"><code>data</code></h3><pre><code>data.line</code></pre><p>Gives the position, in terms of line number, of this script's call location on the current page.</p><h3 id="scripttoken"><code>script_token</code></h3><pre><code>struct script_token {
    token string
    text  string
    line  number
}</code></pre><p>(Only supplied by Spindle through other functions).</p><h3 id="modifier"><code>modifier</code></h3><pre><code>modifier.slug
modifier.unique_slug
modifier.upper
modifier.lower
modifier.title</code></pre><p>An enum map corresponding to the Spindle variable modifiers, used for text manipulation.</p><h2 id="functions">Functions</h2><h3 id="textmodifier"><code>text_modifier</code></h3><pre><code>text_modifier(text, modifier) string</code></pre><p>Accepts a string and a builtin <a href="#modifier">modifier</a>, returning the appropriately formatted string.</p><h3 id="page-contents">Page Contents</h3><pre><code>get(identifier) string, bool</code></pre><p>Accepts an ID for a non-template declaration (meaning no [square brackets] around it) and returns it as a string, with a secondary success boolean that indicates anything was found.</p><pre><code>get_token(depth, matches...) []script_token</code></pre><p>Accepts an integer depth value and a variable number of strings, which will find all instances of a token on a page.</p></main><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></body></html>`
	case "style.css":
		return `html{scroll-behavior:smooth}body{font-family:Atkinson Hyperlegible,Helvetica,Arial,sans-serif;margin:5ex;font-size:1.2rem}::selection{background:#66cdaa;color:#000!important}tt{font-family:DM Mono,SF Mono,Roboto Mono,Source Code Pro,Fira Code,monospace}tt,p{padding:0;margin:0;margin-bottom:.5ex}ul{padding-left:2ex;list-style-type:"×";list-style-position:outside}ul>li{padding-inline-start:1ex}a{color:#000}a:hover{color:#fff;background:#000}main{float:left;width:70ex;margin-right:2vw;margin-bottom:4vh}aside{float:left;max-width:24ex}section:not(:first-child){margin-top:2rem}pre{position:relative;padding:2ex;background:#000}code{white-space:nowrap;background:#eee;padding:.2ex .5ex}pre code{white-space:pre-wrap;background:0 0;padding:0;letter-spacing:0;color:#fff}`
	case "syntax":
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Syntax</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/></head><body><main><tt><a href="/_spindle/manual">Spindle v0.4.2 Manual</a></tt><h1>Syntax</h1><ul class="monospace"><li><a class="nu" href="#tokens">Tokens</a></li><li><a class="nu" href="#blocks">Blocks</a></li><li><a class="nu" href="#declarations">Declarations</a></li><li style="margin-left:2rem"><a class="nu" href="#variables">Variables</a></li><li style="margin-left:2rem"><a class="nu" href="#templating">Templating</a></li><li><a class="nu" href="#builtins">Builtins</a></li><li><a class="nu" href="#semi-builtins">Semi-Builtins</a></li></ul><h2 id="tokens">Tokens</h2><p>Much like Markdown, Spindle uses non-alphanumeric 'tokens' at the start of a line to determine how that line is rendered.</p><p>The difference is that Spindle's tokens can be declared, either as part of a template, or on the fly. This also means that any token can become anything — if you don't like <code>#</code> as H1, then feel free to change it.</p><p>If a new project is created using <code>spindle init</code>, a simple set of 'Markdown emulations' are pre-filled in the default template to get you moving faster:</p><pre><code># H1
## H2
### H2
#### ...

! image.jpg

- Unordered list
- Unordered list

+ Ordered list
+ Ordered list

code raw {
    some_code_thing();
}

Regular lines will become paragraphs.</code></pre><h2 id="blocks">Blocks</h2><p>As you saw in the example above, Spindle's first major deviation from Markdown its block syntax.</p><pre><code>block {
    / something inside
}</code></pre><p>Blocks will wrap their contents in an additional template, allowing for subsections to be created, like a figure and citation around this quote:</p><pre><code>quote {
    source = https://apple.com
    person = Tim Apple

    This is a quote.
}</code></pre><p>...which becomes, in the default <code>spindle init</code> template:</p><p>This is a quote.</p><h2 id="declarations">Declarations</h2><p>Declarations are the way in which templating is created and manipulated.</p><h3 id="variables">Variables</h3><p>Base variables are declared like so:</p><pre><code>page_title = My Blog Post</code></pre><p>These can then be substituted into text or templates using the corresponding syntax:</p><pre><code>&lt;title&gt;%page_title&lt;/title&gt;</code></pre><p>Missing variables will expand to nothing.</p><h3 id="templating">Templating</h3><pre><code>[#] = &lt;h1&gt;%%&lt;/h1&gt;</code></pre><p>For consistency and to distinguish them from other variables, the named declarations that are used for blocks are also wrapped in square brackets:</p><pre><code>[div] = &lt;div&gt;%%&lt;/div&gt;</code></pre><p>You can also use blocks within the declarations themselves — for example, the quote above:</p><pre><code>[quote] = {
    &lt;figure&gt;
        . %%
        &lt;cite&gt;— <a href="%source">%person</a>&lt;/cite&gt;
    &lt;/figure&gt;
}</code></pre><p>Tokens can only be declared as repeated instances of the same non-alphanumeric character:</p><pre><code>[!]   = ...
[??]  = ...
[###] = ...</code></pre><p>Blocks can only be declared as 'identifiers', which is to say they can only be composed of letters, numbers and underscores:</p><pre><code>[div] = ...
[group1] = ...
[article_gallery] = ...</code></pre><p>(Note that an identifier cannot *begin* with a number).</p><h2 id="builtins">Builtins</h2><ul><li><code>&</code> — Templates</li><li><code>~</code> — Imports</li><li><code>></code> — Partials</li><li><code>×</code> — Unset</li><li><code>/</code> — Comments</li></ul><h2 id="semi-builtins">Semi-Builtins</h2><ul><li><code>.</code> — Raw</li></ul><p>The singular <code>.</code> token (this is a regular full-stop/period, by the way) is a regular token available for any use, with the exception the Spindle renderer is hard-coded to not warn about its misuse.</p><p>Normally, when something that *looks* like a token but doesn't a have a corresponding template is used to start a line, Spindle will warn about it: This is because it cannot distinguish between intentional or accidental use of a character in a token syntax, a deliberate lack of associated template declaration or a whole template file being somehow unlinked. If a line *must* start with one or more repeating non-alphanumeric characters, it should be escaped.</p><p>However, the <code>.</code> token will *not* warn. This is so it can be used to force a "raw" line, one which is not wrapped in whatever the chosen default is.</p><p>The <code>.</code> can still be templated with anything you like — it's not reserved like the true builtins, it just serves a default purpose.</p></main><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></body></html>`
	}
}