/*
	Spindle
	A static site generator
	Copyright (C) 2022-2023 Harley Denham

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// this file was generated by tool/embed.sh: don't modify!

package main

func manual_content(arg string) string {
	switch arg {
	case "copy.js":
		return `function set_copy(){if(!navigator.clipboard)return;const e="⌗";let t=document.querySelectorAll("pre");t.forEach(t=>{let s=document.createElement("button");s.className="copy mono",s.innerText=e,t.appendChild(s),s.addEventListener("click",async()=>{await n(t)})});async function n(e){let t=e.querySelector("code"),n=t.innerText;await navigator.clipboard.writeText(n)}}set_copy()`
	default:
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Spindle v0.4.2 Manual</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/><script type="text/javascript" src="/_spindle/manual/copy.js" defer></script></head><body><tt><a href="/">Your Site</a> | <a href="/_spindle/manual">Manual</a></tt><h1>Spindle v0.4.2 Manual</h1><main><p>Welcome to the internal Spindle documentation. Spindle is a static site generator designed with total flexibility in mind. It is also not complete.</p><h2 id="contents">Contents</h2><ul><li><a href="/_spindle/manual/usage">Usage</a></li><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></main></body></html>`
	case "scripting":
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Scripting</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/><script type="text/javascript" src="/_spindle/manual/copy.js" defer></script></head><body><tt><a href="/_spindle/manual">Spindle v0.4.2 Manual</a></tt><h1>Scripting</h1><main><ul><li><a class="nu" href="#implicit-values-and-types">Implicit Values and Types</a></li><li style="margin-left:2rem"><a class="nu" href="#data">data</a></li><li style="margin-left:2rem"><a class="nu" href="#scripttoken">script_token</a></li><li style="margin-left:2rem"><a class="nu" href="#modifier">modifier</a></li><li><a class="nu" href="#functions">Functions</a></li><li style="margin-left:2rem"><a class="nu" href="#textmodifier">text_modifier</a></li><li style="margin-left:2rem"><a class="nu" href="#page-contents">Page Contents</a></li></ul><h2 id="implicit-values-and-types">Implicit Values and Types</h2><h3 id="data">data</h3><pre><code>data.line</code></pre><p>Gives the position, in terms of line number, of this script's call location on the current page.</p><h3 id="scripttoken">script_token</h3><pre><code>struct script_token {
    token string
    text  string
    line  number
}</code></pre><p>(Only supplied by Spindle through other functions).</p><h3 id="modifier">modifier</h3><pre><code>modifier.slug
modifier.unique_slug
modifier.upper
modifier.lower
modifier.title</code></pre><p>An enum map corresponding to the Spindle variable modifiers, used for text manipulation.</p><h2 id="functions">Functions</h2><h3 id="textmodifier">text_modifier</h3><pre><code>text_modifier(text, modifier) string</code></pre><p>Accepts a string and a builtin <a href="#modifier">modifier</a>, returning the appropriately formatted string.</p><h3 id="page-contents">Page Contents</h3><pre><code>get(identifier) string, bool</code></pre><p>Accepts an ID for a non-template declaration (meaning no [square brackets] around it) and returns it as a string, with a secondary success boolean that indicates anything was found.</p><pre><code>get_token(depth, matches...) []script_token</code></pre><p>Accepts an integer depth value and a variable number of strings, which will find all instances of a token on a page.</p></main><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/usage">Usage</a></li><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></body></html>`
	case "style.css":
		return `html{scroll-behavior:smooth}body{font-family:Atkinson Hyperlegible,Helvetica,Arial,sans-serif;margin:5ex;font-size:1.2rem}::selection{background:#66cdaa;color:#000!important}tt,code,.mono{font-family:DM Mono,SF Mono,Source Code Pro,Fira Code,Roboto Mono,monospace;font-size:1.07rem}tt,p{padding:0;margin:0;margin-bottom:.5ex}ul{padding-left:2ex;list-style-type:"×";list-style-position:outside}ul>li{padding-inline-start:1ex}a{color:#000}a:hover{color:#fff;background:#000}main{float:left;width:70ex;margin-right:2vw;margin-bottom:4vh}h2{margin-top:2em}aside{float:left;max-width:24ex}aside>*:first-child{margin:0!important}main>*:first-child{margin-top:0!important}section:not(:first-child){margin-bottom:2rem}pre{position:relative;padding:2ex;background:#000}code{white-space:nowrap;background:#eee;padding:.2ex .5ex}pre code{white-space:pre-wrap;background:0 0;padding:0;letter-spacing:0;color:#fff;font-size:1.2rem}.copy{user-select:none;cursor:pointer;position:absolute;right:20px;top:20px;padding:1px 4px;background:#fff;border:none}.copy:hover{background:#66cdaa}.copy:active{background:#fff}`
	case "syntax":
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Syntax</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/><script type="text/javascript" src="/_spindle/manual/copy.js" defer></script></head><body><tt><a href="/_spindle/manual">Spindle v0.4.2 Manual</a></tt><h1>Syntax</h1><main><ul><li><a class="nu" href="#tokens">Tokens</a></li><li><a class="nu" href="#blocks">Blocks</a></li><li><a class="nu" href="#declarations">Declarations</a></li><li style="margin-left:2rem"><a class="nu" href="#variables">Variables</a></li><li style="margin-left:2rem"><a class="nu" href="#templating">Templating</a></li><li><a class="nu" href="#builtins">Builtins</a></li><li><a class="nu" href="#semi-builtins">Semi-Builtins</a></li><li><a class="nu" href="#resource-finders">Resource Finders</a></li><li style="margin-left:2rem"><a class="nu" href="#images">Images</a></li></ul><h2 id="tokens">Tokens</h2><p>Much like Markdown, Spindle uses non-alphanumeric 'tokens' at the start of a line to determine how that line is rendered.</p><p>The difference is that Spindle's tokens can be declared, either as part of a template, or on the fly. This also means that any token can become anything — if you don't like <code>#</code> as H1, then feel free to change it.</p><p>If a new project is created using <code>spindle init</code>, a simple set of 'Markdown emulations' are pre-filled in the default template to get you moving faster:</p><pre><code># H1
## H2
### H2
#### ...

! image.jpg

- Unordered list
- Unordered list

+ Ordered list
+ Ordered list

code raw {
    some_code_thing();
}

Regular lines will become paragraphs.</code></pre><h2 id="blocks">Blocks</h2><p>As you saw in the example above, Spindle's first major deviation from Markdown its block syntax.</p><pre><code>block {
    / something inside
}</code></pre><p>Blocks will wrap their contents in an additional template, allowing for subsections to be created, like a blockquote and citation around this quote:</p><pre><code>quote {
    This is a quote.

    source = https://apple.com
    person = Tim Apple
}</code></pre><p>...which becomes, when combined:</p><blockquote><p>This is a quote.</p><cite>— <a href="https://apple.com">Tim Apple</a></cite></blockquote><h2 id="declarations">Declarations</h2><p>Declarations are the way in which templating is created and manipulated.</p><h3 id="variables">Variables</h3><p>Base variables are declared like so:</p><pre><code>page_title = My Blog Post</code></pre><p>These can then be substituted into text or templates using the corresponding syntax:</p><pre><code>&lt;title&gt;%page_title&lt;/title&gt;</code></pre><p>Missing variables will expand to nothing.</p><h3 id="templating">Templating</h3><pre><code>[#] = &lt;h1&gt;%%&lt;/h1&gt;</code></pre><p>For consistency and to distinguish them from other variables, the named declarations that are used for blocks are also wrapped in square brackets:</p><pre><code>[div] = &lt;div&gt;%%&lt;/div&gt;</code></pre><p>You can also use blocks within the declarations themselves — for example, the quote above:</p><pre><code>[quote] = {
    &lt;blockquote&gt;
        . %%
        &lt;cite&gt;— [%person](%source)&lt;/cite&gt;
    &lt;/blockquote&gt;
}</code></pre><p>Tokens can only be declared as repeated instances of the same non-alphanumeric character:</p><pre><code>[!]   = ...
[??]  = ...
[###] = ...</code></pre><p>Blocks can only be declared as 'identifiers', which is to say they can only be composed of letters, numbers and underscores:</p><pre><code>[div] = ...
[group1] = ...
[article_gallery] = ...</code></pre><p>(Note that an identifier cannot *begin* with a number).</p><h2 id="builtins">Builtins</h2><ul><li><code>&</code> — Templates</li><li><code>~</code> — Imports</li><li><code>></code> — Partials</li><li><code>×</code> — Unset</li><li><code>/</code> — Comments</li></ul><h2 id="semi-builtins">Semi-Builtins</h2><ul><li><code>.</code> — Raw</li></ul><p>The singular <code>.</code> token (this is a regular full-stop/period, by the way) is a regular token available for any use, with the exception the Spindle renderer is hard-coded to not warn about its misuse.</p><p>Normally, when something that *looks* like a token but doesn't a have a corresponding template is used to start a line, Spindle will warn about it: This is because it cannot distinguish between intentional or accidental use of a character in a token syntax, a deliberate lack of associated template declaration or a whole template file being somehow unlinked. If a line *must* start with one or more repeating non-alphanumeric characters, it should be escaped.</p><p>However, the <code>.</code> token will *not* warn. This is so it can be used to force a "raw" line, one which is not wrapped in whatever the chosen default is.</p><p>The <code>.</code> can still be templated with anything you like — it's not reserved like the true builtins, it just serves a default purpose.</p><h2 id="resource-finders">Resource Finders</h2><p>Resource Finders are used to simplify linking between pages and assets within a Spindle site:</p><pre><code>%{some-page}
%{image.jpg}
%{style.css}</code></pre><p>Each of these finders will search through the tree of files in the <code>/source/</code> directory (top-down and breadth-first) and will return the first match it finds. You can, if there are several assets or pages with the same name, provide a hint by adding a bit of the leading path (or even supplying the entire path):</p><pre><code>%{data/style.css}
%{docs/style.css}</code></pre><p>Index pages are implicitly understood, however, and are simply accessed by supplying the directory path, though <code>dir/index</code> will also work.</p><p>Certain asset types have additional options:</p><h3 id="images">Images</h3><pre><code>%{image.jpg 1920x 90 webp}</code></pre><p>These three arguments can be specified in any order, and reflect the following:</p><ul><li><code>1920x</code> the maximum size (long-edge) that image should be reduced to. In this example, images smaller than 1920 pixels would simply be left as is.</li></ul><ul><li><code>90</code> the quality that this image should be reduced or set as. This does not apply to all formats and will be ignored in those cases.</li></ul><ul><li><code>webp</code> change the output format of this file, in this case to webp.</li></ul><p>Spindle supports transforming images *to* the following formats:</p><ul><li>WEBP (requires <a href="https://developers.google.com/speed/webp/download">cwebp</a> to be installed).</li><li>JPEG</li><li>PNG</li></ul><p>It supports transforming images *from* these formats:</p><ul><li>WEBP (does not require cwebp).</li><li>JPEG</li><li>PNG</li><li>TIFF</li></ul><p>Any other image formats will simply be handled normally without transformation.</p></main><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/usage">Usage</a></li><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></body></html>`
	case "usage":
		return `<!DOCTYPE html><html><head><meta charset="utf-8"><title>Spindle — Usage</title><link rel="stylesheet" type="text/css" href="/_spindle/manual/style.css"/><script type="text/javascript" src="/_spindle/manual/copy.js" defer></script></head><body><tt><a href="/_spindle/manual">Spindle v0.4.2 Manual</a></tt><h1>Usage</h1><main><ul><li><a class="nu" href="#getting-started">Getting Started</a></li><li><a class="nu" href="#serve">Serve</a></li><li><a class="nu" href="#build">Build</a></li><li style="margin-left:2rem"><a class="nu" href="#options">Options</a></li></ul><h2 id="getting-started">Getting Started</h2><p>Initialise a new project *within* an existing directory:</p><pre><code>spindle init</code></pre><h2 id="serve">Serve</h2><p>Launch a local server to work on the site in real-time, with hot reloading:</p><pre><code>spindle serve</code></pre><h2 id="build">Build</h2><p>Output a deployment-ready copy of the site to a <code>/public/</code> directory:</p><pre><code>spindle build</code></pre><h3 id="options">Options</h3><p>Spindle makes use of a piece of syntax called a <a href="/_spindle/manual/syntax#resource-finder">'Resource Finder'</a>: this streamlines the process of linking between pages — you can just put in the page's name, not its full path — and the resulting link styles can all be changed according to the needs of the site in <code>spindle.toml</code> (absolute, relative, etc.).</p><p>You can of course still manually supply links, but it's not recommended for the second reason: Resource Finders track the usage of any given asset or page, and by default <code>spindle build</code> will only output pages that are not orphaned. The root index is assumed to be 'live' as the starting point, and anything reachable from the subsequent tree is included.</p><p>Practically speaking, if you commented out a link in your navigation bar, this would typically make a chunk of your site unreachable to the average user. If the navigation bar uses Resource Finders to create its links, commenting an entry out will remove that entire branch of the site from the build output.</p><p>All of this is to explain this next flag:</p><ul><li><code>-a</code> or <code>--all</code>: this forces Spindle to always render every asset in the source directory, ignoring their orphan status.</li></ul><p>Spindle typically builds a site in just a few milliseconds, but it can also be directed to perform image conversions and resizing. This process is by nature, *much slower*.</p><ul><li><code>--skip-images</code> will ignore any images located by Resource Finders during the build, which is useful if you've just built the entire site and don't want to wait another thirty seconds for a full rebuild to fix a typo.</li></ul></main><aside><h3 id="topics">Topics</h3><ul><li><a href="/_spindle/manual/usage">Usage</a></li><li><a href="/_spindle/manual/syntax">Syntax</a></li><li><a href="/_spindle/manual/scripting">Scripting</a></li></ul></aside><br clear="all"></body></html>`
	}
}