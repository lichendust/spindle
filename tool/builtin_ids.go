package main

import "os"
import "fmt"
import "bytes"
import "strings"
import "hash/fnv"

const SOURCE_FILE = "tool/builtin_ids.txt"
const TARGET_FILE = "source/builtin_ids.go"

func main() {
	buffer := bytes.Buffer{}
	buffer.Grow(1024)

	{
		blob, _ := os.ReadFile("text/header_license.txt")
		buffer.WriteString(string(blob))
		buffer.WriteString("\n\n")
	}

	blob, _ := os.ReadFile(SOURCE_FILE)
	blocks  := strings.Fields(string(blob))

	buffer.WriteString("// this file was generated by tool/builtin_ids.go")
	buffer.WriteString("\n\npackage main\n\nconst (\n")

	for i := 0; i < len(blocks); i += 2 {
		x := blocks[i]
		y := blocks[i + 1]

		buffer.WriteString(fmt.Sprintf("\t_%s uint32 = %d\n", strings.ToUpper(x), hash(y)))
	}

	buffer.WriteString(")")

	os.WriteFile(TARGET_FILE, buffer.Bytes(), os.ModePerm)
}

func hash(x string) uint32 {
	hash := fnv.New32a()
	hash.Write([]byte(x))
	return hash.Sum32()
}